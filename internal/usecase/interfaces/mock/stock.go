// Code generated by MockGen. DO NOT EDIT.
// Source: stock.go
//
// Generated by this command:
//
//	mockgen -source=stock.go -destination=mock/stock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	goproduct "github.com/Hidayathamir/go-product/pkg/goproduct"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecaseStock is a mock of UsecaseStock interface.
type MockUsecaseStock struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseStockMockRecorder
}

// MockUsecaseStockMockRecorder is the mock recorder for MockUsecaseStock.
type MockUsecaseStockMockRecorder struct {
	mock *MockUsecaseStock
}

// NewMockUsecaseStock creates a new mock instance.
func NewMockUsecaseStock(ctrl *gomock.Controller) *MockUsecaseStock {
	mock := &MockUsecaseStock{ctrl: ctrl}
	mock.recorder = &MockUsecaseStockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseStock) EXPECT() *MockUsecaseStockMockRecorder {
	return m.recorder
}

// DecrementStock mocks base method.
func (m *MockUsecaseStock) DecrementStock(ctx context.Context, req goproduct.ReqDecrementStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementStock", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementStock indicates an expected call of DecrementStock.
func (mr *MockUsecaseStockMockRecorder) DecrementStock(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementStock", reflect.TypeOf((*MockUsecaseStock)(nil).DecrementStock), ctx, req)
}

// IncrementStock mocks base method.
func (m *MockUsecaseStock) IncrementStock(ctx context.Context, req goproduct.ReqIncrementStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementStock", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementStock indicates an expected call of IncrementStock.
func (mr *MockUsecaseStockMockRecorder) IncrementStock(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementStock", reflect.TypeOf((*MockUsecaseStock)(nil).IncrementStock), ctx, req)
}

// MockRepoStock is a mock of RepoStock interface.
type MockRepoStock struct {
	ctrl     *gomock.Controller
	recorder *MockRepoStockMockRecorder
}

// MockRepoStockMockRecorder is the mock recorder for MockRepoStock.
type MockRepoStockMockRecorder struct {
	mock *MockRepoStock
}

// NewMockRepoStock creates a new mock instance.
func NewMockRepoStock(ctrl *gomock.Controller) *MockRepoStock {
	mock := &MockRepoStock{ctrl: ctrl}
	mock.recorder = &MockRepoStockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoStock) EXPECT() *MockRepoStockMockRecorder {
	return m.recorder
}

// DecrementStock mocks base method.
func (m *MockRepoStock) DecrementStock(ctx context.Context, productID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementStock", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementStock indicates an expected call of DecrementStock.
func (mr *MockRepoStockMockRecorder) DecrementStock(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementStock", reflect.TypeOf((*MockRepoStock)(nil).DecrementStock), ctx, productID)
}

// IncrementStock mocks base method.
func (m *MockRepoStock) IncrementStock(ctx context.Context, productID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementStock", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementStock indicates an expected call of IncrementStock.
func (mr *MockRepoStockMockRecorder) IncrementStock(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementStock", reflect.TypeOf((*MockRepoStock)(nil).IncrementStock), ctx, productID)
}
