// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source=product.go -destination=mock/product.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	goproduct "github.com/Hidayathamir/go-product/pkg/goproduct"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecaseProduct is a mock of UsecaseProduct interface.
type MockUsecaseProduct struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseProductMockRecorder
}

// MockUsecaseProductMockRecorder is the mock recorder for MockUsecaseProduct.
type MockUsecaseProductMockRecorder struct {
	mock *MockUsecaseProduct
}

// NewMockUsecaseProduct creates a new mock instance.
func NewMockUsecaseProduct(ctrl *gomock.Controller) *MockUsecaseProduct {
	mock := &MockUsecaseProduct{ctrl: ctrl}
	mock.recorder = &MockUsecaseProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseProduct) EXPECT() *MockUsecaseProductMockRecorder {
	return m.recorder
}

// GetDetail mocks base method.
func (m *MockUsecaseProduct) GetDetail(ctx context.Context, req goproduct.ReqProductDetail) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, req)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockUsecaseProductMockRecorder) GetDetail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockUsecaseProduct)(nil).GetDetail), ctx, req)
}

// Search mocks base method.
func (m *MockUsecaseProduct) Search(ctx context.Context, req goproduct.ReqProductSearch) (goproduct.ResProductSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, req)
	ret0, _ := ret[0].(goproduct.ResProductSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockUsecaseProductMockRecorder) Search(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUsecaseProduct)(nil).Search), ctx, req)
}

// MockRepoProduct is a mock of RepoProduct interface.
type MockRepoProduct struct {
	ctrl     *gomock.Controller
	recorder *MockRepoProductMockRecorder
}

// MockRepoProductMockRecorder is the mock recorder for MockRepoProduct.
type MockRepoProductMockRecorder struct {
	mock *MockRepoProduct
}

// NewMockRepoProduct creates a new mock instance.
func NewMockRepoProduct(ctrl *gomock.Controller) *MockRepoProduct {
	mock := &MockRepoProduct{ctrl: ctrl}
	mock.recorder = &MockRepoProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoProduct) EXPECT() *MockRepoProductMockRecorder {
	return m.recorder
}

// GetDetailByID mocks base method.
func (m *MockRepoProduct) GetDetailByID(ctx context.Context, ID int64) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, ID)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockRepoProductMockRecorder) GetDetailByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*MockRepoProduct)(nil).GetDetailByID), ctx, ID)
}

// GetDetailBySKU mocks base method.
func (m *MockRepoProduct) GetDetailBySKU(ctx context.Context, SKU string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySKU", ctx, SKU)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySKU indicates an expected call of GetDetailBySKU.
func (mr *MockRepoProductMockRecorder) GetDetailBySKU(ctx, SKU any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySKU", reflect.TypeOf((*MockRepoProduct)(nil).GetDetailBySKU), ctx, SKU)
}

// GetDetailBySlug mocks base method.
func (m *MockRepoProduct) GetDetailBySlug(ctx context.Context, slug string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySlug", ctx, slug)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySlug indicates an expected call of GetDetailBySlug.
func (mr *MockRepoProductMockRecorder) GetDetailBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySlug", reflect.TypeOf((*MockRepoProduct)(nil).GetDetailBySlug), ctx, slug)
}

// Search mocks base method.
func (m *MockRepoProduct) Search(ctx context.Context, keyword string) (goproduct.ResProductSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, keyword)
	ret0, _ := ret[0].(goproduct.ResProductSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepoProductMockRecorder) Search(ctx, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepoProduct)(nil).Search), ctx, keyword)
}

// MockRepoProductCache is a mock of RepoProductCache interface.
type MockRepoProductCache struct {
	ctrl     *gomock.Controller
	recorder *MockRepoProductCacheMockRecorder
}

// MockRepoProductCacheMockRecorder is the mock recorder for MockRepoProductCache.
type MockRepoProductCacheMockRecorder struct {
	mock *MockRepoProductCache
}

// NewMockRepoProductCache creates a new mock instance.
func NewMockRepoProductCache(ctrl *gomock.Controller) *MockRepoProductCache {
	mock := &MockRepoProductCache{ctrl: ctrl}
	mock.recorder = &MockRepoProductCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoProductCache) EXPECT() *MockRepoProductCacheMockRecorder {
	return m.recorder
}

// GetDetailByID mocks base method.
func (m *MockRepoProductCache) GetDetailByID(ctx context.Context, ID int64) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, ID)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockRepoProductCacheMockRecorder) GetDetailByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*MockRepoProductCache)(nil).GetDetailByID), ctx, ID)
}

// GetDetailBySKU mocks base method.
func (m *MockRepoProductCache) GetDetailBySKU(ctx context.Context, SKU string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySKU", ctx, SKU)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySKU indicates an expected call of GetDetailBySKU.
func (mr *MockRepoProductCacheMockRecorder) GetDetailBySKU(ctx, SKU any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySKU", reflect.TypeOf((*MockRepoProductCache)(nil).GetDetailBySKU), ctx, SKU)
}

// GetDetailBySlug mocks base method.
func (m *MockRepoProductCache) GetDetailBySlug(ctx context.Context, slug string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySlug", ctx, slug)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySlug indicates an expected call of GetDetailBySlug.
func (mr *MockRepoProductCacheMockRecorder) GetDetailBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySlug", reflect.TypeOf((*MockRepoProductCache)(nil).GetDetailBySlug), ctx, slug)
}

// SetDetailByID mocks base method.
func (m *MockRepoProductCache) SetDetailByID(ctx context.Context, data goproduct.ResProductDetail, expire time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDetailByID", ctx, data, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDetailByID indicates an expected call of SetDetailByID.
func (mr *MockRepoProductCacheMockRecorder) SetDetailByID(ctx, data, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDetailByID", reflect.TypeOf((*MockRepoProductCache)(nil).SetDetailByID), ctx, data, expire)
}

// SetDetailBySKU mocks base method.
func (m *MockRepoProductCache) SetDetailBySKU(ctx context.Context, data goproduct.ResProductDetail, expire time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDetailBySKU", ctx, data, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDetailBySKU indicates an expected call of SetDetailBySKU.
func (mr *MockRepoProductCacheMockRecorder) SetDetailBySKU(ctx, data, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDetailBySKU", reflect.TypeOf((*MockRepoProductCache)(nil).SetDetailBySKU), ctx, data, expire)
}

// SetDetailBySlug mocks base method.
func (m *MockRepoProductCache) SetDetailBySlug(ctx context.Context, data goproduct.ResProductDetail, expire time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDetailBySlug", ctx, data, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDetailBySlug indicates an expected call of SetDetailBySlug.
func (mr *MockRepoProductCacheMockRecorder) SetDetailBySlug(ctx, data, expire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDetailBySlug", reflect.TypeOf((*MockRepoProductCache)(nil).SetDetailBySlug), ctx, data, expire)
}
