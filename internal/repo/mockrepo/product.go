// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source=product.go -destination=mockrepo/product.go -package=mockrepo
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	goproduct "github.com/Hidayathamir/go-product/pkg/goproduct"
	gomock "go.uber.org/mock/gomock"
)

// MockIProductCacheGet is a mock of IProductCacheGet interface.
type MockIProductCacheGet struct {
	ctrl     *gomock.Controller
	recorder *MockIProductCacheGetMockRecorder
}

// MockIProductCacheGetMockRecorder is the mock recorder for MockIProductCacheGet.
type MockIProductCacheGetMockRecorder struct {
	mock *MockIProductCacheGet
}

// NewMockIProductCacheGet creates a new mock instance.
func NewMockIProductCacheGet(ctrl *gomock.Controller) *MockIProductCacheGet {
	mock := &MockIProductCacheGet{ctrl: ctrl}
	mock.recorder = &MockIProductCacheGetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductCacheGet) EXPECT() *MockIProductCacheGetMockRecorder {
	return m.recorder
}

// GetDetailByID mocks base method.
func (m *MockIProductCacheGet) GetDetailByID(ctx context.Context, ID int64) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, ID)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockIProductCacheGetMockRecorder) GetDetailByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*MockIProductCacheGet)(nil).GetDetailByID), ctx, ID)
}

// GetDetailBySKU mocks base method.
func (m *MockIProductCacheGet) GetDetailBySKU(ctx context.Context, SKU string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySKU", ctx, SKU)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySKU indicates an expected call of GetDetailBySKU.
func (mr *MockIProductCacheGetMockRecorder) GetDetailBySKU(ctx, SKU any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySKU", reflect.TypeOf((*MockIProductCacheGet)(nil).GetDetailBySKU), ctx, SKU)
}

// GetDetailBySlug mocks base method.
func (m *MockIProductCacheGet) GetDetailBySlug(ctx context.Context, slug string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySlug", ctx, slug)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySlug indicates an expected call of GetDetailBySlug.
func (mr *MockIProductCacheGetMockRecorder) GetDetailBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySlug", reflect.TypeOf((*MockIProductCacheGet)(nil).GetDetailBySlug), ctx, slug)
}

// MockIProductCache is a mock of IProductCache interface.
type MockIProductCache struct {
	ctrl     *gomock.Controller
	recorder *MockIProductCacheMockRecorder
}

// MockIProductCacheMockRecorder is the mock recorder for MockIProductCache.
type MockIProductCacheMockRecorder struct {
	mock *MockIProductCache
}

// NewMockIProductCache creates a new mock instance.
func NewMockIProductCache(ctrl *gomock.Controller) *MockIProductCache {
	mock := &MockIProductCache{ctrl: ctrl}
	mock.recorder = &MockIProductCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductCache) EXPECT() *MockIProductCacheMockRecorder {
	return m.recorder
}

// GetDetailByID mocks base method.
func (m *MockIProductCache) GetDetailByID(ctx context.Context, ID int64) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, ID)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockIProductCacheMockRecorder) GetDetailByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*MockIProductCache)(nil).GetDetailByID), ctx, ID)
}

// GetDetailBySKU mocks base method.
func (m *MockIProductCache) GetDetailBySKU(ctx context.Context, SKU string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySKU", ctx, SKU)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySKU indicates an expected call of GetDetailBySKU.
func (mr *MockIProductCacheMockRecorder) GetDetailBySKU(ctx, SKU any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySKU", reflect.TypeOf((*MockIProductCache)(nil).GetDetailBySKU), ctx, SKU)
}

// GetDetailBySlug mocks base method.
func (m *MockIProductCache) GetDetailBySlug(ctx context.Context, slug string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySlug", ctx, slug)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySlug indicates an expected call of GetDetailBySlug.
func (mr *MockIProductCacheMockRecorder) GetDetailBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySlug", reflect.TypeOf((*MockIProductCache)(nil).GetDetailBySlug), ctx, slug)
}

// SetDetailByID mocks base method.
func (m *MockIProductCache) SetDetailByID(ctx context.Context, data goproduct.ResProductDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDetailByID", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDetailByID indicates an expected call of SetDetailByID.
func (mr *MockIProductCacheMockRecorder) SetDetailByID(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDetailByID", reflect.TypeOf((*MockIProductCache)(nil).SetDetailByID), ctx, data)
}

// SetDetailBySKU mocks base method.
func (m *MockIProductCache) SetDetailBySKU(ctx context.Context, data goproduct.ResProductDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDetailBySKU", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDetailBySKU indicates an expected call of SetDetailBySKU.
func (mr *MockIProductCacheMockRecorder) SetDetailBySKU(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDetailBySKU", reflect.TypeOf((*MockIProductCache)(nil).SetDetailBySKU), ctx, data)
}

// SetDetailBySlug mocks base method.
func (m *MockIProductCache) SetDetailBySlug(ctx context.Context, data goproduct.ResProductDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDetailBySlug", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDetailBySlug indicates an expected call of SetDetailBySlug.
func (mr *MockIProductCacheMockRecorder) SetDetailBySlug(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDetailBySlug", reflect.TypeOf((*MockIProductCache)(nil).SetDetailBySlug), ctx, data)
}

// MockIProduct is a mock of IProduct interface.
type MockIProduct struct {
	ctrl     *gomock.Controller
	recorder *MockIProductMockRecorder
}

// MockIProductMockRecorder is the mock recorder for MockIProduct.
type MockIProductMockRecorder struct {
	mock *MockIProduct
}

// NewMockIProduct creates a new mock instance.
func NewMockIProduct(ctrl *gomock.Controller) *MockIProduct {
	mock := &MockIProduct{ctrl: ctrl}
	mock.recorder = &MockIProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProduct) EXPECT() *MockIProductMockRecorder {
	return m.recorder
}

// GetDetailByID mocks base method.
func (m *MockIProduct) GetDetailByID(ctx context.Context, ID int64) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, ID)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockIProductMockRecorder) GetDetailByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*MockIProduct)(nil).GetDetailByID), ctx, ID)
}

// GetDetailBySKU mocks base method.
func (m *MockIProduct) GetDetailBySKU(ctx context.Context, SKU string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySKU", ctx, SKU)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySKU indicates an expected call of GetDetailBySKU.
func (mr *MockIProductMockRecorder) GetDetailBySKU(ctx, SKU any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySKU", reflect.TypeOf((*MockIProduct)(nil).GetDetailBySKU), ctx, SKU)
}

// GetDetailBySlug mocks base method.
func (m *MockIProduct) GetDetailBySlug(ctx context.Context, slug string) (goproduct.ResProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailBySlug", ctx, slug)
	ret0, _ := ret[0].(goproduct.ResProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailBySlug indicates an expected call of GetDetailBySlug.
func (mr *MockIProductMockRecorder) GetDetailBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailBySlug", reflect.TypeOf((*MockIProduct)(nil).GetDetailBySlug), ctx, slug)
}

// Search mocks base method.
func (m *MockIProduct) Search(ctx context.Context, keyword string) (goproduct.ResProductSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, keyword)
	ret0, _ := ret[0].(goproduct.ResProductSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIProductMockRecorder) Search(ctx, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIProduct)(nil).Search), ctx, keyword)
}
